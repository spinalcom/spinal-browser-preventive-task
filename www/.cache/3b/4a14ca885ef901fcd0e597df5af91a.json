{"id":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","dependencies":[{"name":"/home/spinalcom/Desktop/multi-maquette/preventive/spinal-browser-preventive-task/package.json","includedInParent":true,"mtime":1567517512841},{"name":"/home/spinalcom/Desktop/multi-maquette/node_modules/spinal-env-viewer-plugin-forge/package.json","includedInParent":true,"mtime":1567073730162},{"name":"spinal-env-viewer-graph-service","loc":{"line":38,"column":48},"parent":"/home/spinalcom/Desktop/multi-maquette/node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","resolved":"/home/spinalcom/Desktop/multi-maquette/node_modules/spinal-env-viewer-graph-service/dist/index.js"},{"name":"./BimObjectService","loc":{"line":39,"column":33},"parent":"/home/spinalcom/Desktop/multi-maquette/node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","resolved":"/home/spinalcom/Desktop/multi-maquette/node_modules/spinal-env-viewer-plugin-forge/dist/BimObjectService.js"},{"name":"./Constants","loc":{"line":40,"column":26},"parent":"/home/spinalcom/Desktop/multi-maquette/node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","resolved":"/home/spinalcom/Desktop/multi-maquette/node_modules/spinal-env-viewer-plugin-forge/dist/Constants.js"},{"name":"./utils","loc":{"line":41,"column":22},"parent":"/home/spinalcom/Desktop/multi-maquette/node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","resolved":"/home/spinalcom/Desktop/multi-maquette/node_modules/spinal-env-viewer-plugin-forge/dist/utils.js"},{"name":"./SceneHelper","loc":{"line":42,"column":28},"parent":"/home/spinalcom/Desktop/multi-maquette/node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","resolved":"/home/spinalcom/Desktop/multi-maquette/node_modules/spinal-env-viewer-plugin-forge/dist/SceneHelper.js"}],"generated":{"js":"\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar spinal_env_viewer_graph_service_1 = require(\"spinal-env-viewer-graph-service\");\nvar BimObjectService_1 = require(\"./BimObjectService\");\nvar Constants_1 = require(\"./Constants\");\nvar utils_1 = require(\"./utils\");\nvar SceneHelper_1 = require(\"./SceneHelper\");\nvar SpinalForgeViewer = /** @class */ (function () {\n    function SpinalForgeViewer() {\n        this.bimObjectService = new BimObjectService_1.BimObjectService();\n    }\n    SpinalForgeViewer.prototype.initialize = function (viewerManager) {\n        var _this = this;\n        if (typeof this.initialized === \"undefined\")\n            this.initialized = new Promise(function (resolve) {\n                _this.viewerManager = viewerManager;\n                _this.viewerManager.viewer.addEventListener(Autodesk.Viewing.AGGREGATE_SELECTION_CHANGED_EVENT, function (event) {\n                    console.log(event);\n                    if (typeof event.selections !== \"undefined\" && event.selections.length > 0) {\n                        _this.viewerManager.setCurrentModel(event.selections[0].model);\n                        _this.bimObjectService.setCurrentModel(event.selections[0].model);\n                    }\n                });\n                resolve(true);\n            });\n        return this.initialized;\n    };\n    SpinalForgeViewer.prototype.isInitialize = function () {\n        return typeof this.initialized !== \"undefined\";\n    };\n    SpinalForgeViewer.prototype.waitForInitialization = function () {\n        var _this = this;\n        return new Promise(function (resolve) {\n            var interval = setInterval(function () {\n                if (typeof _this.initialized !== \"undefined\") {\n                    clearInterval(interval);\n                    resolve(true);\n                }\n            }, 200);\n        });\n    };\n    SpinalForgeViewer.prototype.getScene = function (modelId) {\n        return this.scenes.filter(function (scene) {\n            return scene.modelIds.indexOf(modelId) !== -1;\n        });\n    };\n    ;\n    SpinalForgeViewer.prototype.getSVF = function (element, nodeId, name) {\n        return utils_1.loadModelPtr(element.ptr)\n            .then(function (elem) {\n            return utils_1.loadModelPtr(elem.currentVersion);\n        })\n            .then(function (elem) {\n            if (elem.hasOwnProperty('items'))\n                for (var i = 0; i < elem.items.length; i++)\n                    if (elem.items[i].path.get().indexOf('svf') !== -1) {\n                        return {\n                            version: elem.versionId,\n                            path: elem.items[i].path.get(),\n                            id: nodeId,\n                            name: name,\n                            thumbnail: elem.items[i].thumbnail ? elem.items[i].thumbnail.get() : elem.items[i].path.get() + '.png'\n                        };\n                    }\n            return undefined;\n        });\n    };\n    SpinalForgeViewer.prototype.loadBimFile = function (bimfIle, scene, options) {\n        var _this = this;\n        if (options === void 0) { options = []; }\n        return new Promise(function (resolve) {\n            _this.getSVF(bimfIle.element, bimfIle.id, bimfIle.name)\n                .then(function (svfVersionFile) {\n                var option;\n                for (var i = 0; i < options.length; i++) {\n                    if (options[i].urn.get().includes(svfVersionFile.path) !== -1) {\n                        option = options[i];\n                        break;\n                    }\n                }\n                if (typeof option === \"undefined\")\n                    option = {};\n                else if (option.dbIds.get().length > 0)\n                    option = { ids: option.dbIds.get() };\n                var path = window.location.origin + svfVersionFile.path;\n                _this.viewerManager.loadModel(path, option)\n                    .then(function (model) {\n                    _this.bimObjectService\n                        .addModel(bimfIle.id, model, svfVersionFile.version, scene, bimfIle.name);\n                    resolve({ bimFileId: bimfIle.id, model: model });\n                });\n            });\n        });\n    };\n    SpinalForgeViewer.prototype.loadModelFromNode = function (nodeId) {\n        return __awaiter(this, void 0, void 0, function () {\n            var node_1, e_1;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, spinal_env_viewer_graph_service_1.SpinalGraphService.getNodeAsync(nodeId)];\n                    case 1:\n                        node_1 = _a.sent();\n                        if (node_1.type.get() === Constants_1.SCENE_TYPE) {\n                            console.log(node_1);\n                            return [2 /*return*/, SceneHelper_1.SceneHelper.getBimFilesFromScene(nodeId)\n                                    .then(function (children) {\n                                    var promises = [];\n                                    var option = typeof node_1.options !== \"undefined\" ? node_1.options : [];\n                                    for (var i = 0; i < children.length; i++) {\n                                        promises.push(_this.loadBimFile(children[i], node_1, option));\n                                    }\n                                    return Promise.all(promises);\n                                })];\n                        }\n                        else\n                            return [2 /*return*/, SceneHelper_1.SceneHelper.getSceneFromNode(nodeId)\n                                    .then(function (scene) {\n                                    if (typeof scene !== \"undefined\")\n                                        return _this.loadModelFromNode(scene.id);\n                                })];\n                        return [3 /*break*/, 3];\n                    case 2:\n                        e_1 = _a.sent();\n                        console.error(e_1);\n                        return [3 /*break*/, 3];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * return the model associated to the bimfile\n     * @param bimFileId\n     * @param dbId\n     */\n    SpinalForgeViewer.prototype.getModel = function (bimObject) {\n        return this.bimObjectService.getModel(bimObject.dbId, bimObject.bimFileId);\n    };\n    return SpinalForgeViewer;\n}());\nexports.SpinalForgeViewer = SpinalForgeViewer;\n"},"sourceMaps":{"js":{"mappings":[{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}}],"sources":{"../../../node_modules/spinal-env-viewer-plugin-forge/dist/SpinalForgeViewer.js":"\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar spinal_env_viewer_graph_service_1 = require(\"spinal-env-viewer-graph-service\");\nvar BimObjectService_1 = require(\"./BimObjectService\");\nvar Constants_1 = require(\"./Constants\");\nvar utils_1 = require(\"./utils\");\nvar SceneHelper_1 = require(\"./SceneHelper\");\nvar SpinalForgeViewer = /** @class */ (function () {\n    function SpinalForgeViewer() {\n        this.bimObjectService = new BimObjectService_1.BimObjectService();\n    }\n    SpinalForgeViewer.prototype.initialize = function (viewerManager) {\n        var _this = this;\n        if (typeof this.initialized === \"undefined\")\n            this.initialized = new Promise(function (resolve) {\n                _this.viewerManager = viewerManager;\n                _this.viewerManager.viewer.addEventListener(Autodesk.Viewing.AGGREGATE_SELECTION_CHANGED_EVENT, function (event) {\n                    console.log(event);\n                    if (typeof event.selections !== \"undefined\" && event.selections.length > 0) {\n                        _this.viewerManager.setCurrentModel(event.selections[0].model);\n                        _this.bimObjectService.setCurrentModel(event.selections[0].model);\n                    }\n                });\n                resolve(true);\n            });\n        return this.initialized;\n    };\n    SpinalForgeViewer.prototype.isInitialize = function () {\n        return typeof this.initialized !== \"undefined\";\n    };\n    SpinalForgeViewer.prototype.waitForInitialization = function () {\n        var _this = this;\n        return new Promise(function (resolve) {\n            var interval = setInterval(function () {\n                if (typeof _this.initialized !== \"undefined\") {\n                    clearInterval(interval);\n                    resolve(true);\n                }\n            }, 200);\n        });\n    };\n    SpinalForgeViewer.prototype.getScene = function (modelId) {\n        return this.scenes.filter(function (scene) {\n            return scene.modelIds.indexOf(modelId) !== -1;\n        });\n    };\n    ;\n    SpinalForgeViewer.prototype.getSVF = function (element, nodeId, name) {\n        return utils_1.loadModelPtr(element.ptr)\n            .then(function (elem) {\n            return utils_1.loadModelPtr(elem.currentVersion);\n        })\n            .then(function (elem) {\n            if (elem.hasOwnProperty('items'))\n                for (var i = 0; i < elem.items.length; i++)\n                    if (elem.items[i].path.get().indexOf('svf') !== -1) {\n                        return {\n                            version: elem.versionId,\n                            path: elem.items[i].path.get(),\n                            id: nodeId,\n                            name: name,\n                            thumbnail: elem.items[i].thumbnail ? elem.items[i].thumbnail.get() : elem.items[i].path.get() + '.png'\n                        };\n                    }\n            return undefined;\n        });\n    };\n    SpinalForgeViewer.prototype.loadBimFile = function (bimfIle, scene, options) {\n        var _this = this;\n        if (options === void 0) { options = []; }\n        return new Promise(function (resolve) {\n            _this.getSVF(bimfIle.element, bimfIle.id, bimfIle.name)\n                .then(function (svfVersionFile) {\n                var option;\n                for (var i = 0; i < options.length; i++) {\n                    if (options[i].urn.get().includes(svfVersionFile.path) !== -1) {\n                        option = options[i];\n                        break;\n                    }\n                }\n                if (typeof option === \"undefined\")\n                    option = {};\n                else if (option.dbIds.get().length > 0)\n                    option = { ids: option.dbIds.get() };\n                var path = window.location.origin + svfVersionFile.path;\n                _this.viewerManager.loadModel(path, option)\n                    .then(function (model) {\n                    _this.bimObjectService\n                        .addModel(bimfIle.id, model, svfVersionFile.version, scene, bimfIle.name);\n                    resolve({ bimFileId: bimfIle.id, model: model });\n                });\n            });\n        });\n    };\n    SpinalForgeViewer.prototype.loadModelFromNode = function (nodeId) {\n        return __awaiter(this, void 0, void 0, function () {\n            var node_1, e_1;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, spinal_env_viewer_graph_service_1.SpinalGraphService.getNodeAsync(nodeId)];\n                    case 1:\n                        node_1 = _a.sent();\n                        if (node_1.type.get() === Constants_1.SCENE_TYPE) {\n                            console.log(node_1);\n                            return [2 /*return*/, SceneHelper_1.SceneHelper.getBimFilesFromScene(nodeId)\n                                    .then(function (children) {\n                                    var promises = [];\n                                    var option = typeof node_1.options !== \"undefined\" ? node_1.options : [];\n                                    for (var i = 0; i < children.length; i++) {\n                                        promises.push(_this.loadBimFile(children[i], node_1, option));\n                                    }\n                                    return Promise.all(promises);\n                                })];\n                        }\n                        else\n                            return [2 /*return*/, SceneHelper_1.SceneHelper.getSceneFromNode(nodeId)\n                                    .then(function (scene) {\n                                    if (typeof scene !== \"undefined\")\n                                        return _this.loadModelFromNode(scene.id);\n                                })];\n                        return [3 /*break*/, 3];\n                    case 2:\n                        e_1 = _a.sent();\n                        console.error(e_1);\n                        return [3 /*break*/, 3];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * return the model associated to the bimfile\n     * @param bimFileId\n     * @param dbId\n     */\n    SpinalForgeViewer.prototype.getModel = function (bimObject) {\n        return this.bimObjectService.getModel(bimObject.dbId, bimObject.bimFileId);\n    };\n    return SpinalForgeViewer;\n}());\nexports.SpinalForgeViewer = SpinalForgeViewer;\n"},"lineCount":180}},"error":null,"hash":"4f73597834c1c7f6c716cb444cbf308e","cacheData":{"env":{}}}